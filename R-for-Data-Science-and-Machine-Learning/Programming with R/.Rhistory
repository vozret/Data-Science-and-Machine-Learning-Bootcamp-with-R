setwd("~/Documents/Tutorials/Data Science and Machine Learning Bootcamp with R")
setwd("~/Documents/Tutorials/Data Science and Machine Learning Bootcamp with R/R-for-Data-Science-and-Machine-Learning/Programming with R")
x <- 10
(x < 20) & (x > 5)
(x < 20) & (x > 5) & (x == 10)
(x < 20) & (x > 5) & (x == 9)
TRUE & TRUE
TRUE & FALSE
x == 100
x == 10
(x == 100) | (x == 10)
(x == 100) | (x == 10000)
(10 == 1)
(10 != 1)
!(10 == 1)
!!(10 == 1)
df <- mtcars
head(df)
df[df$mpg > 20,]
df[df$mpg > 20, 'mpg']
subset(df, mpg > 20)
df[df$mpg > 20 & df$hp > 100,]
df[(df$mpg > 20) & (df$hp > 100),]
df[(df$mpg > 20) | (df$hp > 100),]
# if
x <- 10
if(x == 10){
print('x is equal to 10!')
}
# if
x <- 10
if(x == 10){
print('x is equal to 10!')
} else if(x == 12) {
print('x is equal to 12!')
} else {
print('x was not equal to 10 or 12!')
}
# if
x <- 13
if(x == 10){
print('x is equal to 10!')
} else if(x == 12) {
print('x is equal to 12!')
} else {
print('x was not equal to 10 or 12!')
}
hot <- FALSE
temp <- 60
print('Temp is grater than 80')
if(temp > 80) {
print('Temp is grater than 80')
}
hot <- FALSE
temp <- 60
if(temp > 80) {
print('Temp is grater than 80')
}
temp <- 81
if(temp > 80) {
print('Temp is grater than 80')
hot <- TRUE
}
print(hot)
temp <- 10
hot <- FALSE
temp <- 10
if(temp > 80) {
print('Temp is grater than 80')
hot <- TRUE
}
print(hot)
ham <- 10
cheese <- 10
report <- 'blank'
if (ham >= 10 & cheese >= 10) {
report <- 'Strong sales of both ham and cheese'
} else if (ham == 0 & cheese == 0) {
report <- 'No sales today'
} else {
report <- "We sold something today"
}
print(report)
ham <- 5
cheese <- 10
report <- 'blank'
if (ham >= 10 & cheese >= 10) {
report <- 'Strong sales of both ham and cheese'
} else if (ham == 0 & cheese == 0) {
report <- 'No sales today'
} else {
report <- "We sold something today"
}
print(report)
# EX 1
x <- 1
if (x %% 2 == 0){
print('x is an even number')
} else {
print('x is an uneven number')
}
# EX 1
x <- 2
if (x %% 2 == 0){
print('x is an even number')
} else {
print('x is an uneven number')
}
# EX 2
x <- matrix()
if (is.matrix(x)){
print("Is a Matrix")
} else {
print("Not a Matrix")
}
# EX 4
x <- c(20, 10, 1)
if(x[1] > x[2] & x[1] > x[3]){
print(x[1])
} else if (x[2] > x[1] & x[2] > x[3]) {
print(x[2])
} else {
print(x[3])
}
# EX 4
x <- c(1, 10, 20)
# EX 4
x <- c(1, 10, 20)
if(x[1] > x[2] & x[1] > x[3]){
print(x[1])
} else if (x[2] > x[1] & x[2] > x[3]) {
print(x[2])
} else {
print(x[3])
}
# EX 4
x <- c(1, 30, 20)
# EX 4
x <- c(1, 30, 20)
if(x[1] > x[2] & x[1] > x[3]){
print(x[1])
} else if (x[2] > x[1] & x[2] > x[3]) {
print(x[2])
} else {
print(x[3])
}
# EX 3
x <- c(3, 7, 1)
if((x[1] > x[2]) & (x[2] > x[3])) {
x <- c(x[1], x[2], x[3])
} else if ((x[1] > x[2]) & (x[2] < x[3])) {
x <- c(x[1], x[3], x[2])
} else if ((x[1] < x[2]) & (x[1] > x[3])) {
x <- c(x[2], x[1], x[3])
} else if ((x[1] < x[2]) & (x[1] < x[3])) {
x <- c(x[2], x[3], x[1])
} else if ((x[1] < x[3]) & (x[1] > x[2])) {
x <- c(x[3], x[1], x[2])
} else {
x <- c(x[3], x[2], x[1])
}
print(x)
x <- 0
while (x < 10) {
print(paste0('x is: ', x))
x <- x + 1
}
###########
x <- 0
while (x < 10) {
print(paste0('x is: ', x))
x <- x + 1
if (x == 10){
print('x is now equal to 10! Break Loop!')
}
}
# keyword break
x <- 0
while (x < 10) {
print(paste0('x is: ', x))
x <- x + 1
if (x == 10){
print('x is now equal to 10! Break Loop!')
break
print('Trying to print')
}
}
# keyword break
x <- 0
while (x < 10) {
print(paste0('x is: ', x))
x <- x + 1
if (x == 5){
print('x is now equal to 5! Break Loop!')
break
print('Trying to print')
}
}
print(variable)
v <- c(1,2,3)
for (variable in v) {
print(variable)
}
v <- c(1,2,3,4,5,6)
for (temp.var in v) {
print(temp.var)
if(temp.var == 4) {
break
}
}
v <- c(1,2,3,4,5,6)
v <- c(1,2,3,4,5,6)
for (temp.var in v) {
result <- temp.var + 1
print(result)
print(temp.var)
}
# we can iterate through different types
v <- list(c(1,2,3), mtcars, 12)
# we can iterate through different types
my.list <- list(c(1,2,3), mtcars, 12)
for (item in my.list) {
print(item)
}
# matrix
mat <- matrix(1:25, nrow = 5)
# matrix
mat <- matrix(1:25, nrow = 5)
for (item in mat) {
print(item)
}
print(mat)
# nested for-loop
# 1:nrow(mat) -> go from first to all the rows in the matrix
# nrow(mat) -> gives us the number of rows
for (row in 1:nrow(mat)) {
print(mat[row,])
for (col in 1:col(mat)) {
print(paste('The element at row', row, 'and column:', col, 'is:', mat[row, col]))
}
}
name_of_func <- function(input1, input2, input3 = 45) {
# code to execute
result <- input1 + input2
return(result)
}
hello <- function(){
print('hello')
}
hello()
hello
hello <- function(name){
print(paste('hello', name))
}
hello('sam')
add_num <- function(num1, num2){
print(num1 + num2)
}
add_num(4,5)
add_num <- function(num1, num2){
my.sum <- num1 + num2
return(my.sum)
}
result <- add_num(4,5)
print(result)
times5 <- function(num) {
return(num*5)
}
print(times5(20))
times5 <- function(num) {
my.result <- num * 5
return(my.result)
}
my.ouput <- times5(100)
my.output <- times5(100)
print(my.output)
print(my.result)
v <- "I'm a global variable"
stuff <- "I'm global stuff"
fun <- function(stuff) {
print(v)
stuff <- 'reassign stuff inside function fun'
print(stuff)
}
fun(stuff)
print(v)
print(stuff)
prod <- function(num1 = 0, num2 = 0) {
product <- num1 + num2
return(product)
}
print(prod(3,4))
# EX 2
num_check <- function(num, vec) {
is_in_vector <- FALSE
for (item in vec) {
if(num == vec) {
is_in_vector <- TRUE
break
}
}
return(is_in_vector)
}
print(num_check(2, c(1,2,3)))
# EX 2
num_check <- function(num, vec) {
is_in_vector <- FALSE
for (item in vec) {
if(num == item) {
is_in_vector <- TRUE
break
}
}
return(is_in_vector)
}
print(num_check(2, c(1,2,3)))
print(num_check(2, c(1,4,5)))
num_count <- function(num, vec) {
num.of.occurences <- 0
for (numb in vec) {
if(num == numb) {
num.of.occurences <- num.of.occurences + 1
}
}
return(num.of.occurences)
}
print(num_count(2, c(1,1,2,2,3,3)))
print(num_count(1,c(1,1,2,2,3,1,4,5,5,2,2,1,3)))
bar_count <- function(kilos) {
num_of_small_bars <- 0
num_of_big_bars <- 0
num_of_small_bars <- kilos %% 5
num_of_big_bars <- (kilos - num_of_small_bars) / 5
total_num_of_bars <- num_of_small_bars + num_of_big_bars
return(total_num_of_bars)
}
bar_count(6)
bar_count(17)
bar_count <- function(kilos) {
num_of_small_bars <- 0
num_of_big_bars <- 0
num_of_small_bars <- kilos %% 5
num_of_big_bars <- (kilos - num_of_small_bars) / 5
total_num_of_bars <- num_of_small_bars + num_of_big_bars
print(paste('number of small bars: ', num_of_small_bars, ' number of big bars: ', num_of_big_bars))
return(total_num_of_bars)
}
bar_count(6)
bar_count(17)
summer <- function(vec) {
vector_of_values <- c()
for (item in vec) {
if(item %% 3 != 0) {
vector_of_values.append(item)
}
}
if(length(vector_of_values) != 0) {
return(sum(vector_of_values))
}
else {
return(0)
}
}
summer(7,2,3)
summer <- function(num1, num2, num3) {
vec <- c(num1, num2, num3)
vector_of_values <- c()
for (item in vec) {
if(item %% 3 != 0) {
vector_of_values.append(item)
}
}
if(length(vector_of_values) != 0) {
return(sum(vector_of_values))
}
else {
return(0)
}
}
summer(7,2,3)
summer <- function(num1, num2, num3) {
vec <- c(num1, num2, num3)
vector_of_values <- c()
for (item in vec) {
if(item %% 3 != 0) {
append(vector_of_values, item)
}
}
if(length(vector_of_values) != 0) {
return(sum(vector_of_values))
}
else {
return(0)
}
}
summer(7,2,3)
summer <- function(num1, num2, num3) {
vec <- c(num1, num2, num3)
vector_of_values <- c(0)
for (item in vec) {
if(item %% 3 != 0) {
append(vector_of_values, item)
}
}
if(length(vector_of_values) != 0) {
return(sum(vector_of_values))
}
else {
return(0)
}
}
summer <- function(num1, num2, num3) {
vec <- c(num1, num2, num3)
vector_of_values <- c(0)
for (item in vec) {
if(item %% 3 != 0) {
append(vector_of_values, item)
}
}
if(length(vector_of_values) != 0) {
sum.of.values <- sum(vector_of_values)
}
else {
sum.of.values <- 0
}
return(sum.of.values)
}
summer(7,2,3)
summer <- function(num1, num2, num3) {
vec <- c(num1, num2, num3)
vector_of_values <- c(0)
for (item in vec) {
if(item %% 3 != 0) {
append(vector_of_values, item)
}
}
sum.of.values <- sum(vector_of_values)
return(sum.of.values)
}
summer(7,2,3)
summer <- function(num1, num2, num3) {
vec <- c(num1, num2, num3)
vector_of_values <- c(0)
for (item in vec) {
print(item)
if(item %% 3 != 0) {
append(vector_of_values, item)
}
print(vector_of_values)
}
sum.of.values <- sum(vector_of_values)
return(sum.of.values)
}
summer(7,2,3)
summer <- function(num1, num2, num3) {
vec <- c(num1, num2, num3)
vector_of_values <- c(0)
for (item in vec) {
print(item)
if(item %% 3 != 0) {
vector_of_values <- append(vector_of_values, item)
}
print(vector_of_values)
}
sum.of.values <- sum(vector_of_values)
return(sum.of.values)
}
summer(7,2,3)
summer <- function(num1, num2, num3) {
vec <- c(num1, num2, num3)
vector_of_values <- c(0)
for (item in vec) {
# print(item)
if(item %% 3 != 0) {
vector_of_values <- append(vector_of_values, item)
}
# print(vector_of_values)
}
sum.of.values <- sum(vector_of_values)
return(sum.of.values)
}
summer(7,2,3)
summer(3,6,9)
summer(9,11,12)
is.prime <- function(number) {
if (number <= 1) {
return (FALSE)
} else if (number <= 3) {
return (TRUE)
}
if (number %% 2 == 0 || number %% 3 == 0) {
return (FALSE)
}
i <- 5
while (i*i <= number) {
if (number %% i == 0 || number %% (i+2) == 0) {
return (FALSE)
}
i = i + 6
}
return (TRUE)
}
is.prime(2)
is.prime(5)
is.prime(4)
is.prime(237)
is.prime(131)
