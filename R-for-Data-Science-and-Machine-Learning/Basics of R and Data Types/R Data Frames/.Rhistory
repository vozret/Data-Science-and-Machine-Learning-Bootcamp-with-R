setwd("~/Documents/Tutorials/Data Science and Machine Learning Bootcamp with R")
state.x77
USPersonalExpenditure
women
# list of all available dataframes in R:
data()
# to take a peek at the bottom or start of the data frame
head(state.x77)
tail(state.x77)
# to see the structure of the data frame
str(state.x77)
# to see the statistics of the data
summary(state.x77)
# creating a data frame
days <- c('Mon', 'Tue', 'Wed', 'Thu', 'Fri')
temp <- c(22.2, 21, 23, 24.3, 25)
rain <- c(T, T, F, F, T)
data.frame(days, temp, rain)
df <- data.frame(days, temp, rain)
df
str(df)
summary((df))
source('~/Documents/Tutorials/Data Science and Machine Learning Bootcamp with R/R-for-Data-Science-and-Machine-Learning/Basics of R and Data Types/R Data Frames/Data Frame Indexing and Selection.R')
df
# indexing
# all columns from the first row
df[1,]
# all rows from the first column
df[,1]
# we can label our rows and columns by some character names
# all rain values
df[,'rain']
# first five rows for days and temps
df[1:5, c('days', 'temp')]
# dollar sign notation
df$days
# bracket notation
df['days']
# to grab a subset based on some condition
# grab the data when it rained
# subset argument expects some condition, it knows we will be referring to column name
# so the quotes aren't necessary
subset(df, subset = rain == T)
# temp > 23
subset(df, subset = temp > 23)
sorted.temp
# ordering a data frame
sorted.temp <- order(df['temp'])
sorted.temp
# ordering a data frame
sorted.temp <- order(df['temp'])
sorted.temp
df[sorted.temp]
df[sorted.temp,]
# descending order
desc.temp <- order(-df['temp'])
df[desc.temp,]
# we could use the dollar sign notation
desc.temp <- order(-df$temp)
df[desc.temp,]
# basic empty data frame
empty <- data.frame()
# data frame from vector
c1 <- 1:10
letters
c2 <- letters[1:10]
df <- data.frame(col.name.1 = c1, col.name.2 = c2)
df
# write to csv
write.csv(df, file = "saved_df.csv")
df2 <- read.csv("saved_df.csv")
df2
setwd("~/Documents/Tutorials/Data Science and Machine Learning Bootcamp with R/R-for-Data-Science-and-Machine-Learning/Basics of R and Data Types/R Data Frames")
# write to csv
write.csv(df, file = "saved_df.csv")
df2 <- read.csv("saved_df.csv")
df2
df
# Getting information about data frame
# get row count
nrow(df)
# get column count
ncols(df)
# get column count
ncol(df)
colnames(df)
# get the structure of the data frame
str(df)
# get the statistical summary of the data frame
summary(df)
# using brackets
# data_frame[[row_value, column_value]]
df[[5, 2]]
# when we want to reference a column name
df[[5, 'c']]
# when we want to reference a column name
df[[5, 'col.name.2']]
# assigning a value to a cell
df[[2, 'col.name.1']] <- 9999
df
# referencing rows
df[1,]
# referencing columns
mtcars
head(mtcars)
head(mtcars)
# get a vector of values
mtcars$mpg
# brackets
mtcars[, mpg]
# brackets
mtcars[, 'mpg']
# brackets but with a number of that column
mtcars[, 1]
# two sets of brackets
mtcars[['mpg']]
# get back the data frame instead just vector with values
mtcars['mpg']
# get multiple columns back
head(mtcars[c('mpg', cyl)])
# get multiple columns back
head(mtcars[c('mpg', 'cyl')])
# adding rows
df2 <- data.frame(col.name.1 = 2000, col.name.2 = 'new')
df
df2
df2
# using rbind
dfnew = rbind(df, df2)
dfnew
# adding columns
df
df$newcol <- 2*df$col.name.1
df
df$newcol.copy <- df$newcol
head(df)
df[, 'newcol.copy2'] <- df$newcol
head(df)
# setting column names
colnames(df)
# renaming
# all of them at once
colnames(df) <- c('1', '2', '3', '4', '5')
head(df)
# rename a single column
colnames(df)[1] <- 'NEW COL NAME'
head(df)
# selecting multiple rows
df[1:10,]
df[1:3,]
head(df, 7)
head(df)
df[-2,]
# conditional selection
head(mtcars)
mtcars[mtcars$mpg > 20]
mtcars[mtcars$mpg > 20,]
# multiple conditions
mtcars[(mtcars$mpg > 20) & (mtcars$cyl == 6),]
mtcars[(mtcars$mpg > 20) & (mtcars$cyl == 6), c('mpg', 'cyl', 'hp')]
# we can also use the subset function
subset(mtcars, (mpg > 20) & (cyl == 6))
# select multiple columns
head(mtcars)
head(mtcars[, c(1,2,3)])
head(mtcars[, c('mpg', 'cyl', 'disp')])
# check for na values
is.na(mtcars)
# if any of the values is na
any(is.na(mtcars))
# we can pass in the column
any(is.na(mtcars$mpg))
# replace the missing data
df[is.na(df)] <- 0
df
# for a single column
df$2[is.na(df$2)] <- 0
# for a single column
df[2][is.na(df[2])] <- 0
df[2][is.na(df[2])] <- mean(df[1])
df[2][is.na(df[2])] <- mean(df['NEW COL NAME'])
Age <- c(22, 25, 26)
Weigth <- c(150, 165, 120)
Sex <- c('M', 'M', 'F')
Weight <- c(150, 165, 120)
df <- data.frame(Age, Weight, Sex, row.names = c('Sam', 'Frank', 'Amy'))
df
# EX 2
is.data.frame(mtcars)
# EX 3
mat <- matrix(1:25, nrow = 5)
mat <- as.data.frame(mat)
mat
# EX 4
df <- mtcars
# EX 5
head(df, 6)
# EX 6
ave(df$mpg)
# EX 7
subset(df, cyl == 6)
# EX 8
df[df$cyl == 6, c('am', 'gear', 'carb')]
# EX 8
df[, c('am', 'gear', 'carb')]
# EX 9
df$performance <- df$hp / df$wt
df
head(df)
df$performance <- round(df$performance, 2)
head(df)
# EX 11
ave(df[(df$hp > 100) & (df$wt > 2.5), 'mpg'])
# EX 12
df['Hornet Sportabout', 'mpg']
# EX 11
ave(df[(df$hp > 100) & (df$wt > 2.5), ]$mpg)
# EX 11
ave(df[(df$hp > 100) & (df$wt > 2.5), ]$mpg)
# EX 11
ave(df[(df$hp > 100) & (df$wt > 2.5), $mpg])
# EX 11
ave(df[(df$hp > 100) & (df$wt > 2.5), 'mpg'])
