setwd("~/tutorials/Data-Science-and-Machine-Learning-Bootcamp-with-R/R-for-Data-Science-and-Machine-Learning")
print("Hello world")
setwd("~/tutorials/Data-Science-and-Machine-Learning-Bootcamp-with-R/R-for-Data-Science-and-Machine-Learning/Advanced Programming with R")
# seq() to create a sequence
# creates a regular sequence
# seq(star, stop, step_size)
seq(0, 10, by=2)
seq(0, 100, by=10)
# sort - sort a vector
v <- c(1,4,7,2,13,3,11)
v
sort(v)
v
# descending order
sort(v, decreasing = T)
cv
cv <- c("b", "d", "a")
cv
sort(cv)
cv <- c("b", "c", "d", "a", "C")
sort(cv)
# rev() -> reverse elemnts in object
v <- 1:10
rev(v)
# str() -> show the structure of an object
str(v)
str(mtcars)
v <- 1:10
v2 <- 35:40
append(v, v2)
# check th data type
# is.smth
v <- c(1,2,3)
is.vector(v)
is.data.frame(v)
is.data.frame(mtcars)
as.list(v)
is.vector(v)
as.matrix(v)
# randomly sample objects from a vector
# sample(vector object, how many samples we want to grab from this vector)
sample(x = 1:10, 1)
# randomly sample objects from a vector
# sample(vector object, how many samples we want to grab from this vector)
sample(x = 1:10, 1)
# randomly sample objects from a vector
# sample(vector object, how many samples we want to grab from this vector)
sample(x = 1:10, 1)
# randomly sample objects from a vector
# sample(vector object, how many samples we want to grab from this vector)
# always a different number
sample(x = 1:10, 1)
# randomly sample objects from a vector
# sample(vector object, how many samples we want to grab from this vector)
# always a different number
sample(x = 1:10, 1)
# randomly sample objects from a vector
# sample(vector object, how many samples we want to grab from this vector)
# always a different number
sample(x = 1:10, 1)
# randomly sample objects from a vector
# sample(vector object, how many samples we want to grab from this vector)
# always a different number
sample(x = 1:100, 3)
v <- c(1:5)
v <- c(1:5)
# custom function
addrand <- function(x) {
rand <- sample(1:100, 1)
return (x + rand)
}
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
print(addrand(10))
# lapply(vector, function to apply (only the name))
lapply(v, addrand)
# lapply(vector, function to apply (only the name))
resultl <- lapply(v, addrand)
print(resultl)
resultS <- sapply(v, addrand)
print(resultS)
v <- 1:5
times2 <- function(num){
return (num*2)
}
result <- sapply(v, times2)
print(result)
# similar to lambda expressions in python
## ANONYMOUS FUNCTIONS
# similar to lambda expressions in python
## ANONYMOUS FUNCTIONS
# similar to lambda expressions in python
v <- 1:5
result <- sapply(v, function(num){num*2})
print(v)
print(result)
return (num + choice)
# Apply for multiple inputs
add_choice <- function(num, choice){
return (num + choice)
}
print(add_choice(2, 10))
# error
sapply(v, add_choice)
sapply(v, add_choice, choice=100)
print(sapply(v, add_choice, choice=100))
# abs(): returns the absolute value
abs(2)
abs(-2)
abs(c(-2, .3, 0, 4))
abs(c(-2, -3, 0, 4))
v <- c(-2, -3, 0, 4)
abs(v)
# sum(): returns the sum of all the values present in the input
sum(v)
# mean(): computes the arithmetic mean
mean(v)
# round(): rounds values (additional arguments to nearest)
round(2.3313231, digits=2)
rount(2, 3777, 3)
round(2, 3777, 3)
round(2.3777, 3)
text <- "Hi there, do you know who you are voting for?"
text
# grepl(term we are searching for, object we want to search through)
grepl("voting", text)
# returns TRUE if the expression is in inside of text
grepl("dog", text)
grepl("do you", text)
v <- c("a", "b", "c", "d", "d")
v
grepl("b", v)
# grep() -> return the index where the expression is found
grep("b", v)
# grep() -> returns the index where the expression is found
grep("b", v)
# grep() -> returns the index where the expression is found
# returns all the locations where the pattern occured
grep("b", v)
grep("d", v)
# grep() -> returns the index where the expression is found
# returns all the locations where the pattern ocurred
grep("b", v)
# How a date object l9ooks like in R
Sys.Date()
today <- Sys.Date()
class(today)
c <- "1990-01-01"
class(c)
my.date <- as.Date(c)
class(my.date)
# when date is not in the standard format
# when date is not in the standard format
# when date is not in the standard format
# when date is not in the standard format
# when date is not in the standard format
# when date is not in the standard format
# when date is not in the standard format
as.Date("Nov-03-1990")
my.date <- as.Date("Nov-03-1990", format = "%b-%d-%y")
my.date
as.POSIXct("11:01:03", format="%H:%M:%S")
strptime("11:02:03", format="%H:%M:%S")
strptime("Nov-03-1990", format="%b-%d-%y")
strptime("Nov-03-1990", format="%b-%d-%Y")
setwd("~/tutorials/Data-Science-and-Machine-Learning-Bootcamp-with-R/R-for-Data-Science-and-Machine-Learning/Data Manipulation in R")
install.packages("dplyr")
# install package data
install.packages("nycflights13")
library(dplyr)
library(nycflights13)
library(dplyr)
library(nycflights13)
head(flights)
summary(flights)
# filter and slice
# when we call filter in this script, filter from dplyr
# library will be called by default
head(filter(flights, month == 11, day==3, carrier=="AA"))
# with bracket notation:
head(flights[flights$month==11 & flights$day==3 & flights$carrier == "AA"])
# with bracket notation:
head(flights[flights$month==11 & flights$day==3 & flights$carrier == "AA", ])
# slice functions
# returns rows by position
slice(flights, 1:10)
head(arrange(flights, year, month, day, air_time))
head(arrange(flights, year, month, day, arr_time))
# descenging arrival time
head(arrange(flights, year, month, day, desc(arr_time))
# descenging arrival time
head(arrange(flights, year, month, day, arr_time)))
# descending arrival time
head(arrange(flights, year, month, day, desc(arr_time)))
head(select(flights, carrier))
head(select(flights, carrier, arr_time))
head(rename(flights, airline_carrier = carrier))
distinct(select(flights, carrier))
head(mutate(flights, new_col = arr_delay - dep_delay))
head(transmute(flights, new_col = arr_delay - dep_delay))
# na.rm -> remove NaN values when calculating the mean
summarise(flights, avg_air_time = mean(airtime, na.rm = TRUE))
# na.rm -> remove NaN values when calculating the mean
summarise(flights, avg_air_time = mean(air_time, na.rm = TRUE))
summarise(flights, total_air_time = sum(air_time, na.rm = TRUE))
sample_n(flights, 10)
# 10% of the rows
sample_frac(flights, 10)
# 10% of the rows
sample_frac(flights, 0.1)
